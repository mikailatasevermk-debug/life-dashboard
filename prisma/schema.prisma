generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SpaceType {
  PROJECTS
  FAMILY
  HOME
  LOVE
  BUYING
  CAREER
  FAITH
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // For credentials auth
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  notes    Note[]
  events   Event[]
  addons   AddonConfig[]
  seeds    Seed[]
  harvests Harvest[]
  loveEntries LoveEntry[]
  moodEntries MoodEntry[]
  progress UserProgress?
  achievements Achievement[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Space {
  id          String    @id @default(cuid())
  type        SpaceType @unique
  name        String
  color       String
  icon        String?
  description String?
  order       Int       @default(0)
  
  notes  Note[]
  events Event[]
  addons AddonConfig[]
  seeds  Seed[]
  harvests Harvest[]
  loveEntries LoveEntry[]
  moodEntries MoodEntry[]

  @@map("spaces")
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  spaceType SpaceType
  title     String?
  content   Json     @default("{}")
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space  Space  @relation(fields: [spaceType], references: [type])
  assets Asset[]
  tags   Tag[]
  events Event[]

  @@index([userId, spaceType])
  @@map("notes")
}

model Asset {
  id        String   @id @default(cuid())
  noteId    String
  type      String
  url       String
  metadata  Json?
  createdAt DateTime @default(now())

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@map("assets")
}

model Event {
  id               String    @id @default(cuid())
  userId           String
  spaceType        SpaceType
  noteId           String?
  title            String
  description      String?
  startDate        DateTime
  endDate          DateTime?
  isAllDay         Boolean   @default(false)
  sharedWithFamily Boolean   @default(false)
  recurrence       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space  @relation(fields: [spaceType], references: [type])
  note  Note?  @relation(fields: [noteId], references: [id], onDelete: SetNull)

  @@index([userId, startDate])
  @@map("events")
}

model AddonConfig {
  id        String    @id @default(cuid())
  userId    String
  spaceType SpaceType
  type      String
  enabled   Boolean   @default(true)
  config    Json      @default("{}")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceType], references: [type])

  @@unique([userId, spaceType, type])
  @@map("addon_configs")
}

model LoveEntry {
  id        String    @id @default(cuid())
  userId    String
  spaceType SpaceType @default(LOVE)
  type      String
  content   String?
  metadata  Json?
  createdAt DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceType], references: [type])

  @@index([userId, createdAt])
  @@map("love_entries")
}

model Seed {
  id         String    @id @default(cuid())
  userId     String
  spaceType  SpaceType
  title      String
  content    String?
  status     String    @default("planted")
  harvestId  String?
  plantedAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space   Space    @relation(fields: [spaceType], references: [type])
  harvest Harvest? @relation(fields: [harvestId], references: [id], onDelete: SetNull)

  @@index([userId, spaceType])
  @@map("seeds")
}

model Harvest {
  id          String    @id @default(cuid())
  userId      String
  spaceType   SpaceType
  title       String
  content     String?
  impact      String?
  harvestedAt DateTime  @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space  @relation(fields: [spaceType], references: [type])
  seeds Seed[]

  @@index([userId, spaceType])
  @@map("harvests")
}

model MoodEntry {
  id        String    @id @default(cuid())
  userId    String
  spaceType SpaceType
  mood      Int
  note      String?
  createdAt DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  space Space @relation(fields: [spaceType], references: [type])

  @@index([userId, createdAt])
  @@map("mood_entries")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String?

  notes Note[]

  @@map("tags")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserProgress {
  id           String   @id @default(cuid())
  userId       String   @unique
  coins        Int      @default(0)
  level        Int      @default(1)
  xp           Int      @default(0)
  totalActions Int      @default(0)
  lastActivity DateTime @default(now())
  dailyStreak  Int      @default(0)
  lastLoginDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_progress")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  code        String
  name        String
  description String
  icon        String
  unlockedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
  @@map("achievements")
}
